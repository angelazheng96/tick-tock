---
import "../styles/global.css";

import Layout from "../components/Layout.astro";
---

<Layout title="Stopwatch">
  <div
    class="h-screen flex flex-col items-center justify-center font-['Fira'] bg-light text-dark"
  >
    <h1 class="text-eggplant text-2xl sm:text-3xl md:text-4xl mb-4">
      Stopwatch
    </h1>
    <div class="text-sm text-rose">
      <span id="hoverText" class="italic">Tick, tock...</span>
      <audio src="/audio/slow-clock-ticking.mp3" id="hoverAudio" preload="auto"
      ></audio>
      <a href="./" class="hover:text-lilac hover:underline">go back home!</a>
    </div>

    <div id="time" class="text-6xl sm:text-8xl md:text-9xl my-10">00:00:00</div>
    <div>
      <button
        id="startPause"
        class="p-2 w-20 h-10 bg-rose rounded-xl border-pink border-2
          hover:bg-pink hover:border-rose hover:cursor-pointer
          active:bg-pink active:border-eggplant"
        >Start</button
      >
      <button
        id="reset"
        class="p-2 w-20 h-10 bg-rose rounded-xl border-pink border-2
          hover:bg-pink hover:border-rose hover:cursor-pointer
          active:bg-pink active:border-eggplant"
        >Reset</button
      >
    </div>
  </div>

  <script is:inline>
    const timeDisplay = document.getElementById("time");

    // Start and pause stopwatch
    const startPauseBtn = document.getElementById("startPause");
    startPauseBtn?.addEventListener("click", toggleTimer);

    // Reset stopwatch
    const resetBtn = document.getElementById("reset");
    resetBtn?.addEventListener("click", resetTimer);

    let timerRunning = false;
    let timeElapsed = 0;

    let currentTime;
    let startTime;

    let timerInterval;

    // Toggle timer between start or pause
    function toggleTimer() {
      timerRunning = !timerRunning;

      // If timer is starting
      if (timerRunning) {
        timeElapsed = 0;
        startTime = Date.now();
        currentTime = startTime;

        // Toggle start and pause button text
        startPauseBtn.textContent = "Pause";

        // Update timer every 0.2 seconds
        timerInterval = setInterval(() => {
          updateTimer();
        }, 200);
      }

      // Otherwise, timer is pausing
      else {
        clearInterval(timerInterval);
        startPauseBtn.textContent = "Resume";
      }
    }

    // Update the time display with the elapsed time
    function updateTimer() {
      // Compare current time to the stopwatch start time
      currentTime = Date.now();
      timeElapsed = Math.floor((currentTime - startTime) / 1000);

      // Update time display and tab title
      let formattedTime = formatTime(timeElapsed);
      document.getElementById("time").textContent = formattedTime;
      document.title = `${formattedTime} | Tick Tock`;
    }

    // Format time in seconds into HH:MM:SS
    function formatTime(seconds) {
      const hrs = String(Math.floor(seconds / 3600)).padStart(2, "0");
      const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, "0");
      const secs = String(seconds % 60).padStart(2, "0");
      return `${hrs}:${mins}:${secs}`;
    }

    // Reset timer to 0
    function resetTimer() {
      clearInterval(timerInterval);
      timerRunning = false;
      timeElapsed = 0;
      document.getElementById("time").textContent = "00:00:00";
      document.title = "Stopwatch | Tick Tock";

      startPauseBtn.textContent = "Start";
    }

    // Play clock ticking sound when hovering over "Tick, tock..."
    const hoverAudio = document.getElementById("hoverAudio");
    const hoverText = document.getElementById("hoverText");

    hoverText.addEventListener("mouseover", () => {
      console.log("mouse over");
      hoverAudio.currentTime = 0;
      hoverAudio.play();
    });

    hoverText.addEventListener("mouseout", () => {
      console.log("mouse out");
      hoverAudio.pause();
      hoverAudio.currentTime = 0;
    });
  </script>
</Layout>
